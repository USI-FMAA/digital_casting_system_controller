<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.11">
  <POU Name="MAIN" Id="{231ff93b-6e60-47c8-9de3-03f4e5acf3e6}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM MAIN
VAR	

	fb_MC_SetPosition		:FB_SoEAX5000SetPositionOffset;
	pos:LREAL;
	Mixer1_2		: FB_Mixer1_2;
	Analog			: FB_Analog;

	SafetyReset 	: bool;
	b_Enable		: BOOL;
	b_Reset			: BOOL;


	
	Test : MC_ReadStatus;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[//***********************************************************************************
//
// ETH Zürich / Robotic Fabrication Lab
// HIB C 13 / Stefano-Franscini-Platz 1
// CH-8093 Zürich
// 
// ***********************************************************************************
// 
// PROJECT     :  A061 Inline Mixer
// 
// FUNCTION    :  MAIN Programm
// 
// AUTHOR      :  Mathias Suter /Weiting Chen
// 
// EMAIL       :  mathias.suter@solinaut.ch
// 
// Copyright   :  ETH Zürich (CH) 2021
//
// ***********************************************************************************


//
// Mode selector ( ONLY FOR READ OUTPUT NOW
P_ModeSelector();

//
// Set research data 
P_Set_Research_Data();

// ******************************************************************
// 220916 WT

//*************************
// Superplasticizer Pump
//*************************

//
// Superplasticizer Pump 1 Calibraration (220916 WT
P_SP1_Check();

//
// Superplasticizer Pump 1 On/Off
IF GVL_ResearchData.b_RED_Superplasticizer_Pump_Check_On=FALSE THEN
	//
	// Superplasticizer Pump 1 On/Off
	P_SP1_OnOff();
END_IF

//*************************
// Acceleration Pump
//*************************

//
// Acceleration Pump 1 Calibraration
P_AP1_Check();

//
// Check for Acceleration Pump 1 state
IF GVL_ResearchData.b_RED_Acceleration_Pump_Check_On=FALSE THEN
	//
	// Acceleration Pump 1 On/Off 
	P_AP1_OnOff();
END_IF

//*************************
// Concrete Pump
//*************************


// ******************************************************************
//
// Mixer On/Off 
P_MI1_OnOff();

//
// Temporary scaling of the poti and laptop ontrol for the mixer override  (WT 220916
IF GVL_ResearchData.b_RED_Laptop_speed_Conctrol THEN
	IF GVL_ResearchData.f_RED_Control_Speed_by_Laptop > 100
		THEN
		GVL_ResearchData.f_RED_Control_Speed_by_Laptop:=100;
	END_IF
	GVL_VAR.f_MI1_Override:=GVL_ResearchData.f_RED_Control_Speed_by_Laptop;
ELSE
	GVL_VAR.f_MI1_Override:=100.0 / 32767 * GVL_IO.in_MI1_Poti_Speed;
END_IF


//
// Mixer 1 + 2
Mixer1_2(
	Mixer1			:= GVL.Axis_Mixer1,
 	Mixer2			:= GVL.Axis_Mixer2,
	f_Velocity		:= GVL_VAR.f_MI1_MaxSpeed,
	b_JogForward	:= FALSE,
	b_JogBackwards	:= GVL_VAR.b_MI1_Run,
 	b_Enable		:= GVL_IO.ib_CC1_Button_Mode_Manual AND GVL_IO.ib_CC1_Safety_Ready,	
 	b_Reset			:= GVL_IO.ib_CC1_Button_Reset,
	f_Override		:= GVL_VAR.f_MI1_Override);	
	(*
	fb_MC_SetPosition(
	Axis			:= GVL.Axis_Mixer2,
	memory			:= 1,
	Feedback		:= 0);*)
	
pos:=GVL.Axis_Mixer2.NcToPlc.ModuloActPos;


//
GVL.f_MID1_ActCurrent:=GVL.in_MID1_ActAbsCurrent * 5.9 / 1000;
GVL.f_MID1_ActTorque:=GVL.f_MID1_ActCurrent * 0.8 * 8; // Torque constante / Gear transaltion

GVL.f_MID2_ActCurrent:=gvl.in_MID2_ActAbsCurrent * 5.9 / 1000;
GVL.f_MID2_ActTorque:=GVL.f_MID2_ActCurrent * 0.8 * 8; // Torque constante / Gear transaltion

//
// Write global variable for mixer ready to drive
GVL_VAR.b_MI1_ReadToDrive:=Mixer1_2.b_ReadyToDrive;
	
// 
// Reset 
GVL_IO.ob_CC1_Safety_Reset:=GVL_IO.ib_CC1_Button_Reset;
 	
// GVL.bResetSafety	:= safetyReset;


//
// Concrete pump
P_CP1_Enable();
	
// Analog();

//
// Outputs
P_Outputs_Manual();

//
// Read researchs data 
P_Read_Research_Data();
]]></ST>
    </Implementation>
    <LineIds Name="MAIN">
      <LineId Id="790" Count="137" />
      <LineId Id="429" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>