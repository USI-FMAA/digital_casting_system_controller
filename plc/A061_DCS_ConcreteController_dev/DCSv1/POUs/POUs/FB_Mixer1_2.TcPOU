<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.4">
  <POU Name="FB_Mixer1_2" Id="{935a84fd-0f65-4b26-b95e-306a02ba9bea}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_Mixer1_2
VAR_INPUT
	// General
	b_Enable				: BOOL;		
	b_Reset					: BOOL;
	
	// Parameter SetPosition
	b_ModeSetPosition		: BOOL;				// Active Mode SetPosition
	b_SetPositionMixer1		: BOOL;				// SetPositon mixer 1 with f_SetPosition1
	b_SetPositionMixer2		: BOOL;				// SetPositon mixer 2 with f_SetPosition1
	f_SetPositionMixer1		: LREAL;			
	f_SetPositionMixer2		: LREAL;			
	
	//Parameter positions
	f_OffsetPositionMixer1 	: LREAL;			// 0..360°
	f_OffsetPositionMixer2 	: LREAL;			// 0..360°	
	f_CollisionPosMin		: LREAL := 35; 		// 0°..f_CollisionPosMax
	f_CollisionPosMax		: LREAL	:= 145;		// f_CollisionPosMin..180°
	f_OffsetMixer1Mixer2	: LREAL := 90; 		//0..360°
	
	//
	// Parameter drive
	f_Override				: LREAL;
	f_Velocity				: LREAL;
	b_JogForward			: BOOL;
	b_JogBackwards			: BOOL;
END_VAR
VAR_OUTPUT
	b_PowerActiveMixer1		: BOOL;
	b_PowerActiveMixer2		: BOOL;
	b_ReadyToDrive			: BOOL;
	b_ErrorGen				: BOOL;
	b_ErrorMixer1			: BOOL;
	b_ErrorMixer2			: BOOL;
	n_ErrorIDMixer1			: UDINT;
	n_ErrorIDMixer2			: UDINT;
	f_ActVelocityMixer1		: LREAL;
	f_ActVelocityMixer2		: LREAL;
	f_ActTorqueMixer1		: LREAL;
	f_ActTorqueMixer2		: LREAL;
	f_ActPositionMixer1		: LREAL;
	f_ActPositionMixer2		: LREAL;
END_VAR
VAR_IN_OUT
	Mixer1					: AXIS_REF;
	Mixer2					: AXIS_REF;
END_VAR
VAR		
	n_Step					: INT;				// Step chain
	b_ErrorInt				: BOOL;				// Error Intern

	b_Mixer1InCollision		: BOOL;				// Check if paddle mixer 1 in collision zone
	b_Mixer2InCollision		: BOOL;				// Check if paddle mixer 2 in collision zone
	f_PositionMixer1		: LREAL; 			// Position paddle mixer 1 in 0°..180°
	f_PositionMixer2		: LREAL; 			// Position paddle mixer 2 in 180°..360° (scaled 180°..0°)                                               
	f_ActPositionMixer1Calc	: LREAL;			// Actual position mixer 1 (with offset)
	f_ActPositionMixer2Calc	: LREAL;			// Actual position mixer 2 (with offset)

	// FBs	
	fb_Mixer1				: FB_Drive;	
	fb_Mixer2				: FB_Drive;	
	fb_MC_GearIn			: MC_GearIn;
	fb_MC_GearOut			: MC_GearOut;	
	fb_MC_ReadStatusMixer1	: MC_ReadStatus;
	fb_MC_ReadStatusMixer2	: MC_ReadStatus;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[//***********************************************************************************
//
// ETH Zürich / Robotic Fabrication Lab
// HIB C 13 / Stefano-Franscini-Platz 1
// CH-8093 Zürich
// 
// ***********************************************************************************
// 
// PROJECT     :  ?? 
// 
// FUNCTION    :  FB_DriveGea
// 
// AUTHOR      :  Mathias Suter
// 
// EMAIL       :  mathias.suter@solinaut.ch
// 
// Copyright   :  ETH Zürich (CH) 2021
//
// ***********************************************************************************

//
// Limit f_OffsetPositionMixer1 and f_OffsetPositionMixer2 to 0°..360°
IF f_OffsetPositionMixer1 < 0 THEN
	f_OffsetPositionMixer1 := 0;
END_IF
IF f_OffsetPositionMixer1 > 360 THEN
	f_OffsetPositionMixer1 := 360;
END_IF

IF f_OffsetPositionMixer2 < 0 THEN
	f_OffsetPositionMixer2 := 0;
END_IF
IF f_OffsetPositionMixer2 > 360 THEN
	f_OffsetPositionMixer2 := 360;
END_IF

//
// Calculate and limit f_ActPosition1Calc and f_ActPosition1Calc to 0°..360°
f_ActPositionMixer1Calc := f_ActPositionMixer1 + f_OffsetPositionMixer1;
IF f_ActPositionMixer1Calc < 0 THEN
	f_ActPositionMixer1Calc := f_ActPositionMixer1Calc + 360;
ELSIF f_ActPositionMixer1Calc > 360 THEN
	f_ActPositionMixer1Calc := f_ActPositionMixer1Calc - 360;
END_IF

f_ActPositionMixer2Calc := f_ActPositionMixer2 + f_OffsetPositionMixer2;
IF f_ActPositionMixer2Calc < 0 THEN
	f_ActPositionMixer2Calc := f_ActPositionMixer1Calc + 360;
ELSIF f_ActPositionMixer2Calc > 360 THEN
	f_ActPositionMixer2Calc := f_ActPositionMixer1Calc - 360;
END_IF

//
// Calculate which position has the mixer 1 paddle in 0°-180° zone (f_ActPosition1Calc or f_ActPosition1Calc + 180°)
// for checking collision
IF f_ActPositionMixer1Calc < 180 THEN
	f_PositionMixer1 := f_ActPositionMixer1Calc;
ELSE	
	f_PositionMixer1 := f_ActPositionMixer1Calc - 180;
END_IF

//
// Calculate which position has the mixer 1 paddle in 180°-360° zone (f_ActPosition2Calc or f_ActPosition2Calc + 180°) 
// scale position 180° - 360° to 180° - 0°, for checking collision
(*IF f_ActPositionMixer2Calc < 180 THEN
	f_PositionMixer2 := 180 - f_ActPositionMixer2Calc;
ELSE	
	f_PositionMixer2 := 360 - f_ActPositionMixer2Calc;
END_IF*)

IF f_ActPositionMixer2Calc < 180 THEN
	f_PositionMixer2 := f_ActPositionMixer2Calc;
ELSE	
	f_PositionMixer2 := f_ActPositionMixer2Calc - 180;
END_IF

//
//Check if paddle in collision zone
b_Mixer1InCollision := f_PositionMixer1 > f_CollisionPosMin AND f_PositionMixer1 < f_CollisionPosMax;
b_Mixer2InCollision := f_PositionMixer2 > f_CollisionPosMin AND f_PositionMixer2 < f_CollisionPosMax;

//
// Limit offset mixer 1 to mixer 2 (for driving)
IF f_OffsetMixer1Mixer2 < 0 THEN
	f_OffsetMixer1Mixer2 := 0;
END_IF
IF f_OffsetMixer1Mixer2 > 360 THEN
	f_OffsetMixer1Mixer2 := 360;
END_IF

fb_MC_ReadStatusMixer1(Axis:=Mixer1,
					Enable:=TRUE);

fb_MC_ReadStatusMixer2(Axis:=Mixer2,
					Enable:=TRUE);


//
// Step chain for Gear In two Axis
CASE n_step OF
	
	0:
		//
		// Init
		n_Step := 10;
	
	10:
		//
		// Enable or set position
		IF b_Enable THEN
			n_Step := 20;
		END_IF;
		
		//
		// Error
		IF b_ErrorInt THEN
			n_Step := 200;
		END_IF
			
	20:
		//
		// GearOut
		IF fb_MC_GearOut.Done THEN
			n_Step := 30;
		END_IF
		
		//
		// Not Enable or Error	
		IF NOT b_Enable THEN
			n_Step := 10;
 		ELSIF b_ErrorInt THEN
			n_Step := 200;
		END_IF

	30:
		//
		//Set position posible (via b_SetPosition1 or b_SetPosition2 to value f_SetPosition1/f_SetPosition2)
				
		//
		// End set position 
		IF NOT b_ModeSetPosition THEN
			n_Step := 35;
		END_IF
			
		//
		// Not Enable or Error	
		IF NOT b_Enable THEN
			n_Step := 10;
 		ELSIF b_ErrorInt THEN
			n_Step := 200;
		END_IF
	35:
		//
		//Enable
		IF fb_Mixer1.b_PowerActive AND fb_Mixer2.b_PowerActive THEN
			n_Step := 40;	
		END_IF
		
		//
		// Not Enable or Error	
		IF NOT b_Enable THEN
			n_Step := 10;
 		ELSIF b_ErrorInt THEN
			n_Step := 200;
		END_IF
		
	40:
		//
		// Check mixer 1 or mixer 2 in collision zone
		IF b_Mixer1InCollision OR b_Mixer1InCollision THEN
			IF f_PositionMixer1 < f_PositionMixer2 THEN 
				//
				// Drive backwards out off collision zone
				n_Step := 50;
			ELSE
				//
				// Drive forward  out off collision zone
				n_Step := 60;
			END_IF;
		ELSE
			//
			// No driving
			n_Step := 70;
		END_IF
		
		//
		// Not Enable or Error	
		IF NOT b_Enable THEN
			n_Step := 10;
 		ELSIF b_ErrorInt THEN
			n_Step := 200;
		END_IF
		
	50:
		//
		// Drive till mixer 1 and mixer 2 not in collision zone (drive backwards)
		IF NOT b_Mixer1InCollision AND NOT b_Mixer2InCollision THEN
			n_Step := 70;
		END_IF
				
		//
		// Not Enable or Error	
		IF NOT b_Enable THEN
			n_Step := 10;
 		ELSIF b_ErrorInt THEN
			n_Step := 200;
		END_IF

	60:
		//
		// Drive till mixer 1 and mixer 2 not in collision zone (drive forward)
		IF NOT b_Mixer1InCollision AND NOT b_Mixer2InCollision THEN
			n_Step := 70;
		END_IF
		
		//
		// Not Enable or Error	
		IF NOT b_Enable THEN
			n_Step := 10;
 		ELSIF b_ErrorInt THEN
			n_Step := 200;
		END_IF
					
	70:
		//
		// Check mixer 1 and mixer 2 standstill
		IF Mixer1.Status.StandStill AND Mixer2.Status.StandStill THEN
			//
			// Calculate offset mixer 1 to mixer 2
			IF (f_ActPositionMixer1Calc + f_OffsetMixer1Mixer2) > 360 THEN
				fb_Mixer2.f_Position := f_ActPositionMixer1Calc + f_OffsetMixer1Mixer2 - 360;
			ELSE	
				fb_Mixer2.f_Position := f_ActPositionMixer1Calc + f_OffsetMixer1Mixer2;
			END_IF
			
			n_Step := 80;		
		END_IF
	
		//
		// Not Enable or Error	
		IF NOT b_Enable THEN
			n_Step := 10;
 		ELSIF b_ErrorInt THEN
			n_Step := 200;
		END_IF

	80:
		//
		//
		n_Step := 85;
		
		//
		// Not Enable or Error	
		IF NOT b_Enable THEN
			n_Step := 10;
 		ELSIF b_ErrorInt THEN
			n_Step := 200;
		END_IF
		
	85:
		//
		//
		IF fb_Mixer2.b_MoveAbsoluteDone THEN
			n_Step := 100;
		END_IF		
			
		//
		// Not Enable or Error	
		IF NOT b_Enable THEN
			n_Step := 10;
 		ELSIF b_ErrorInt THEN
			n_Step := 200;
		END_IF

	100:
		//
		// Couple
		IF fb_MC_GearIn.InGear THEN
			n_Step := 110;
		END_IF;
		
		//
		// Not Enable or Error
		IF NOT b_Enable THEN
			n_Step := 10;
 		ELSIF b_ErrorInt THEN
			n_Step := 200;
		END_IF	
	
	110:
		//
		//  Jog command possible (Coupled) via b_JogForward/b_JogBackwards
		
		
		//
		// Go to mode set position
		IF b_ModeSetPosition THEN
			n_Step := 20;	
		END_IF
		
		//
		// Not Enable or Error
		IF NOT b_Enable THEN
			n_Step := 10;
 		ELSIF b_ErrorInt THEN
			n_Step := 200;
		END_IF		
						
	200:
		// 	
		// GearOut
		IF fb_MC_GearOut.Done THEN
			n_Step := 210;
		END_IF
	
	210:
		//
		// No Error		
		IF NOT b_ErrorInt AND (b_Reset or not b_Enable) THEN
			n_Step := 10;
		END_IF
		
END_CASE


//
// Errors
b_ErrorInt:= fb_Mixer1.b_Error OR fb_Mixer2.b_Error OR fb_MC_GearIn.Error OR fb_MC_GearOut.Error;


//
// Outputs
b_PowerActiveMixer1			:= fb_Mixer1.b_PowerActive;
b_PowerActiveMixer2			:= fb_Mixer2.b_PowerActive;
b_ReadyToDrive				:= n_Step = 110;
b_ErrorGen					:= b_ErrorInt;
b_ErrorMixer1				:= fb_Mixer1.b_Error;
b_ErrorMixer2				:= fb_Mixer2.b_Error;
n_ErrorIDMixer1				:= fb_Mixer1.n_ErrorID;
n_ErrorIDMixer2				:= fb_Mixer2.n_ErrorID;
f_ActVelocityMixer1			:= fb_Mixer1.f_ActVelocity;
f_ActVelocityMixer2			:= fb_Mixer2.f_ActVelocity;
f_ActTorqueMixer1			:= fb_Mixer1.f_ActTorque;
f_ActTorqueMixer2			:= fb_Mixer2.f_ActTorque;
f_ActPositionMixer1			:= fb_Mixer1.f_ActPosition;
f_ActPositionMixer2			:= fb_Mixer2.f_ActPosition;
	
 
//
// Set position for mode SetPosition
IF n_Step = 30 THEN
	fb_Mixer1.f_Position := f_SetPositionMixer1;		
	fb_Mixer2.f_Position := f_SetPositionMixer2;
END_IF

//		
// Set velocity for Mixer 1/2		
IF n_Step = 110 THEN  
	fb_Mixer1.f_Velocity := f_Velocity;		   
	fb_Mixer2.f_Velocity := f_Velocity;	
ELSE
	fb_Mixer1.f_Velocity := 10;		   
	fb_Mixer2.f_Velocity := 10;
	f_Override:=100;
END_IF	   

//
// FB Mixer1
fb_Mixer1(
	Axis 					:= Mixer1,
	b_Enable 				:= b_Enable AND n_Step >= 35 AND n_Step <= 110,
	b_Reset					:= b_Reset AND NOT b_Enable,
	b_JogForward			:= (n_Step = 60 AND b_Mixer1InCollision) OR (n_Step = 110 AND b_JogForward),	  
	b_JogBackwards			:= (n_Step = 50 AND b_Mixer1InCollision) OR (n_Step = 110 AND b_JogBackwards),	
	b_MoveAbsolute			:= FALSE,
	n_MoveAbsoluteDirection := MC_Shortest_Way,
	b_Home					:= n_Step = 30 AND b_SetPositionMixer1,
	f_Acceleration			:= 0,
	f_Deceleration			:= 0,	
	f_Jerk					:= 0,
	f_Override 				:= f_Override);

	
//
// FB Mixer2
fb_Mixer2(
	Axis 					:= Mixer2,
	b_Enable 				:= b_Enable AND n_Step >= 35 AND n_Step <= 110,
	b_Reset					:= b_Reset AND NOT b_Enable,
	b_JogForward			:= (n_Step = 50 AND b_Mixer2InCollision),  
	b_JogBackwards			:= (n_Step = 60 AND b_Mixer2InCollision),	
	b_MoveAbsolute			:= n_Step = 80 OR n_Step = 85,
	n_MoveAbsoluteDirection := MC_Shortest_Way,
	b_Home					:= n_Step = 30 AND b_SetPositionMixer2,
	f_Acceleration			:= 0,
	f_Deceleration			:= 0,	
	f_Jerk					:= 0,
	f_Override 				:= f_Override);

//
// FB GearIn	
fb_MC_GearIn(
	Master 					:= Mixer1,
	Slave					:= Mixer2,
	Execute					:= b_Enable AND (n_Step = 100),
	RatioNumerator 			:= 1,
	RatioDenominator 		:= 1);
	                    	
//                      	
// FB GearOut           	
fb_MC_GearOut(          	
	Slave 					:= Mixer2,
	Execute					:= n_Step = 20 OR n_Step = 200);
	]]></ST>
    </Implementation>
    <LineIds Name="FB_Mixer1_2">
      <LineId Id="4216" Count="18" />
      <LineId Id="4241" Count="49" />
      <LineId Id="4703" Count="4" />
      <LineId Id="4702" Count="0" />
      <LineId Id="4291" Count="13" />
      <LineId Id="4692" Count="1" />
      <LineId Id="4695" Count="1" />
      <LineId Id="4694" Count="0" />
      <LineId Id="4697" Count="0" />
      <LineId Id="4305" Count="30" />
      <LineId Id="5008" Count="5" />
      <LineId Id="4342" Count="11" />
      <LineId Id="5002" Count="5" />
      <LineId Id="4982" Count="0" />
      <LineId Id="4361" Count="0" />
      <LineId Id="4990" Count="1" />
      <LineId Id="4986" Count="1" />
      <LineId Id="4989" Count="0" />
      <LineId Id="4984" Count="0" />
      <LineId Id="4996" Count="5" />
      <LineId Id="4985" Count="0" />
      <LineId Id="4983" Count="0" />
      <LineId Id="4362" Count="66" />
      <LineId Id="4700" Count="1" />
      <LineId Id="4431" Count="88" />
      <LineId Id="4521" Count="22" />
      <LineId Id="4549" Count="6" />
      <LineId Id="4808" Count="0" />
      <LineId Id="4557" Count="2" />
      <LineId Id="4907" Count="1" />
      <LineId Id="4562" Count="0" />
      <LineId Id="4913" Count="2" />
      <LineId Id="4565" Count="0" />
      <LineId Id="4567" Count="14" />
      <LineId Id="4625" Count="0" />
      <LineId Id="4583" Count="15" />
      <LineId Id="4626" Count="0" />
      <LineId Id="4600" Count="15" />
    </LineIds>
  </POU>
</TcPlcObject>