<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.11">
  <POU Name="MAIN" Id="{231ff93b-6e60-47c8-9de3-03f4e5acf3e6}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM MAIN
VAR	

	fb_MC_SetPosition		:FB_SoEAX5000SetPositionOffset;
	pos:LREAL;
	Mixer1_2		: FB_Mixer1_2;
	Analog			: FB_Analog;

	SafetyReset 	: bool;
	b_Enable		: BOOL;
	b_Reset			: BOOL;
	
	Test : MC_ReadStatus;
	
	temp_speed_override: INT;
	
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[//***********************************************************************************
//
// ETH Zürich / Robotic Fabrication Lab
// HIB C 13 / Stefano-Franscini-Platz 1
// CH-8093 Zürich
// 
// ***********************************************************************************
// 
// PROJECT     :  A061 Inline Mixer
// 
// FUNCTION    :  MAIN Programm
// 
// AUTHOR      :  Mathias Suter 
// 
// EMAIL       :  mathias.suter@solinaut.ch
// 
// Copyright   :  ETH Zürich (CH) 2021
//
// ***********************************************************************************

P_Data_Convert();
//
// Mode selector 
P_ModeSelector();

//
// Set research data 
P_Set_Research_Data();

//WT

//***********************************************************************************
// Superplasticizer Pump
//***********************************************************************************

//
// Superplasticizer Pump 1 Check (220916 WT
P_SP1_Check();

//
// Superplasticizer Pump 1 On/Off
IF NOT GVL_ResearchData.b_RED_Superplasticizer_Pump_Check_On THEN
	//
	// Superplasticizer Pump 1 On/Off
	P_SP1_OnOff();
END_IF

//***********************************************************************************
// Acceleration Pump
//***********************************************************************************

//
// Acceleration Pump 1 check
P_AP1_Check();

//
// Check for Acceleration Pump 1 state
IF NOT GVL_ResearchData.b_RED_Acceleration_Pump_Check_On THEN
	//
	// Acceleration Pump 1 On/Off 
	P_AP1_OnOff();
END_IF


//***********************************************************************************
// Inline Mixer
//***********************************************************************************

//
//
P_MI1_OnOff();

//
// Temporary scaling of the poti and laptop ontrol for the mixer override  (WT 221006
IF GVL_VAR.b_Mode_Laptop THEN
	IF GVL_ResearchData.b_RED_Mixer_Curved_Speed_On THEN
		//
		P_MI1_Curved_Speed();
		//
		temp_speed_override:=F_ScalAnalogOut(
			n_Input:= REAL_TO_INT(P_MI1_Curved_Speed.f_MI1_speed),
			n_InMin:= 0, 
			n_InMax:= 120, 
			n_OutMin:= 0, 
			n_OutMax:= 100);
	ELSE
		temp_speed_override:=F_ScalAnalogOut(
			n_Input:= REAL_TO_INT(GVL_ResearchData.f_RED_Control_Speed_by_Laptop),
			n_InMin:= 0, 
			n_InMax:= 120, 
			n_OutMin:= 0, 
			n_OutMax:= 100);
	END_IF
ELSE
	temp_speed_override:=F_ScalAnalogOut(
		n_Input:= REAL_TO_INT(GVL_IO.in_MI1_Poti_Speed),
		n_InMin:= 0, 
		n_InMax:= 32767, 
		n_OutMin:= 0, 
		n_OutMax:= 100);
END_IF

GVL_VAR.f_MI1_Override:= temp_speed_override;

//
// Mixer 1 + 2
Mixer1_2(
	Mixer1			:= GVL.Axis_Mixer1,
 	Mixer2			:= GVL.Axis_Mixer2,
	f_Velocity		:= GVL_VAR.f_MI1_MaxSpeed,
	b_JogForward	:= FALSE,
	b_JogBackwards	:= GVL_VAR.b_MI1_Run,
 	b_Enable		:= (GVL_VAR.b_Mode_Manual OR GVL_VAR.b_Mode_Laptop) AND GVL_IO.ib_CC1_Safety_Ready,	
 	b_Reset			:= GVL_IO.ib_CC1_Button_Reset,
	f_Override		:= GVL_VAR.f_MI1_Override);	
	(*
	fb_MC_SetPosition(
	Axis			:= GVL.Axis_Mixer2,
	memory			:= 1,
	Feedback		:= 0);*)
	
pos:=GVL.Axis_Mixer2.NcToPlc.ModuloActPos;


// Torque
GVL.f_MID1_ActCurrent:=GVL.in_MID1_ActAbsCurrent * 5.9 / 1000;
GVL.f_MID1_ActTorque:=GVL.f_MID1_ActCurrent * 0.8 * 8; // Torque constante / Gear transaltion # 221214 WT Torque constante to 0.8

GVL.f_MID2_ActCurrent:=gvl.in_MID2_ActAbsCurrent * 5.9 / 1000;
GVL.f_MID2_ActTorque:=GVL.f_MID2_ActCurrent * 0.8 * 8; // Torque constante / Gear transaltion

//
// Write global variable for mixer ready to drive
GVL_VAR.b_MI1_ReadToDrive:=Mixer1_2.b_ReadyToDrive;
	
// 
// Reset 
GVL_IO.ob_CC1_Safety_Reset:=TRUE;
 	
// GVL.bResetSafety	:= safetyReset;


//***********************************************************************************
// Concrete Pump
//***********************************************************************************
P_CP1_Enable();

P_CP1_Check();
// Analog();

//
// Outputs
IF GVL_VAR.b_Mode_Manual THEN
	//	
	P_Outputs_Manual();
	
ELSIF GVL_VAR.b_Mode_Laptop THEN
	//	
	P_Outputs_Laptop();
END_IF

//
// Read researchs data 
P_Read_Research_Data();
]]></ST>
    </Implementation>
    <LineIds Name="MAIN">
      <LineId Id="790" Count="27" />
      <LineId Id="1021" Count="0" />
      <LineId Id="820" Count="32" />
      <LineId Id="1170" Count="0" />
      <LineId Id="858" Count="0" />
      <LineId Id="1022" Count="1" />
      <LineId Id="861" Count="0" />
      <LineId Id="1026" Count="0" />
      <LineId Id="1024" Count="1" />
      <LineId Id="862" Count="0" />
      <LineId Id="1151" Count="0" />
      <LineId Id="864" Count="1" />
      <LineId Id="1000" Count="0" />
      <LineId Id="1068" Count="0" />
      <LineId Id="1133" Count="0" />
      <LineId Id="1152" Count="0" />
      <LineId Id="1069" Count="0" />
      <LineId Id="1108" Count="4" />
      <LineId Id="1107" Count="0" />
      <LineId Id="1074" Count="0" />
      <LineId Id="1076" Count="4" />
      <LineId Id="1075" Count="0" />
      <LineId Id="1070" Count="0" />
      <LineId Id="872" Count="0" />
      <LineId Id="1063" Count="4" />
      <LineId Id="1058" Count="0" />
      <LineId Id="874" Count="0" />
      <LineId Id="1055" Count="1" />
      <LineId Id="876" Count="38" />
      <LineId Id="944" Count="2" />
      <LineId Id="917" Count="0" />
      <LineId Id="1188" Count="0" />
      <LineId Id="918" Count="4" />
      <LineId Id="947" Count="0" />
      <LineId Id="950" Count="1" />
      <LineId Id="956" Count="0" />
      <LineId Id="952" Count="0" />
      <LineId Id="954" Count="1" />
      <LineId Id="949" Count="0" />
      <LineId Id="924" Count="3" />
      <LineId Id="429" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>