<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.11">
  <POU Name="P_Robot_Operate" Id="{58930efb-01e5-4003-bd7a-2dbe09f4be91}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM P_Robot_Operate
VAR
	fb_MC_SetPosition		:FB_SoEAX5000SetPositionOffset;
	pos:LREAL;
	Mixer1_2		: FB_Mixer1_2;
	Analog			: FB_Analog;
	SafetyReset 	: bool;
	b_Enable		: BOOL;
	b_Reset			: BOOL;

	Test : MC_ReadStatus;

	fb_SetOutputDataToIO : FB_SetOutputDataToIO;
	fb_getOutputData : FB_GetOutputData;
	fb_setConfig : FB_SetConfigData;
	
	//
	b_Safety_Reset : BOOL :=FALSE;
	b_Timer_Rest : BOOL;
	t_CC1_Time_Safety_Rest : TIME :=T#5S; //wait 5s for controller restart
	fb_CC1_Trigger_Safety_On : R_TRIG;
	fb_CC1_Trigger_Safety_Off : R_TRIG;
	fb_CC1_Timer_Safety: TON;
	
	

END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[// ***********************************************************************************
//
// Müller-steinag Gruppe, Kandergrien Einigen, CH-3646 Bern
// ETH Zurich, Building HIF E26, Laura-Hezner-Weg 7, CH-8093 Zürich
// 
// ***********************************************************************************
// 
// PROJECT     :  A061 Digital Casting System 
// FUNCTION    :  Robot operate process
// AUTHOR      :  Weiting Chen
// EMAIL       :  chenw@usi.ch
// Copyright   :  USI Mendrisio; ETH Zürich; Müller-steinag Gruppe (CH) 2024
//
// ***********************************************************************************


b_Timer_Rest:=GVL_ROB.ib_CC1_reset;

//controller reset trigger
fb_CC1_Timer_Safety(
					IN:=b_Timer_Rest,
					PT:=t_CC1_Time_Safety_Rest);

fb_CC1_Trigger_Safety_On(clk:=fb_CC1_Timer_Safety.IN);
fb_CC1_Trigger_Safety_Off(clk:=fb_CC1_Timer_Safety.Q);
//b_Safety_Reset:=FALSE;
IF fb_CC1_Trigger_Safety_On.Q THEN
	b_Safety_Reset:=TRUE;
ELSIF
	fb_CC1_Trigger_Safety_Off.Q THEN 
	GVL_ROB.ib_CC1_reset:=FALSE;
	b_Safety_Reset:=FALSE;
END_IF
GVL_IO.ob_CC1_Safety_Reset:= GVL_ROB.ib_CC1_reset OR GVL_IO.ib_CC1_Button_Reset;


// Concrete Conctroller enable 
P_CC1_Enable( b_set_run:= GVL_ROB.ib_CC1_enable);


//***********************************************************************************
// Set Process Configuration
//***********************************************************************************

fb_setConfig(
// Gerenal
// Concrete Controller
// Inline Mixer
_f_MI1_Override_Max_Speed :=120,

// Concrete Pump
_f_CP1_Max_Flowrate := INT_TO_REAL(GVL_RESD.n_Concrete_Pump_Max_Speed) * 
								   GVL_RESD.f_Concrete_Pump_dosing_volume,
_f_CP1_Check_Flowrate := GVL_RESD.f_Concrete_Pump_Check_Flowrate,
_t_CP1_Check_Duration := INT_TO_TIME(GVL_RESD.n_Concrete_Pump_Check_Duration*1000),

// Admixture pump (High)
_n_AP1_Max_Flowrate := GVL_RESD.n_Admixture_Pump_Max_Flowrate,
_n_AP1_Check_Flowrate := GVL_RESD.f_Admixture_Pump_Check_Flowrate,
_t_AP1_Check_Duration := INT_TO_TIME(GVL_RESD.n_Admixture_Pump_Check_Duration*1000),
_n_AP1_Flush_Flowrate := GVL_RESD.f_Admixture_Pump_Flush_Flowrate,
//_f_AP1_Check_Mass : REAL;

// Admixture pump (low)
_n_SP1_Max_Flowrate := GVL_RESD.n_Sup_Admixture_Pump_Max_Flowrate,
_n_SP1_Check_Flowrate := GVL_RESD.f_Sup_Admixture_Pump_Check_Flowrate,
_t_SP1_Check_Duration := INT_TO_TIME(GVL_RESD.n_Sup_Admixture_Pump_Check_Duration*1000),
//_f_SP1_Check_Mass : REAL;
);

//***********************************************************************************
// Setup IO data to PLC
//***********************************************************************************	
fb_SetOutputDataToIO(		
	// Mixer 
	b_MI1_set_run := GVL_ROB.ib_MI1_set_run,
	b_Ml1_Enable := GVL_ROB.ib_Ml1_enable,
	b_MI1_Curved_Speed_On := GVL_ROB.ib_MI1_set_curved_speed_mode_on,
	f_MI1_Override_Speed := UINT_TO_REAL(GVL_ROB.in_MI1_set_speed),
	
	f_MI1_Override_Max_Speed := GVL_RESD.f_MI1_Override_Max_Speed,
	
	// Concrete Pump
	b_CP1_Forward_On := GVL_ROB.ib_CP1_forward_on,
	b_CP1_Backward_On := GVL_ROB.ib_CP1_backward_on,
	b_CP1_Flush_On := GVL_ROB.ib_CP1_flush_on,
	b_CP1_Check_On := GVL_ROB.ib_CP1_check_on,
	n_CP_Flowrate_mode := TRUE,
	n_CP1_Operate_Flowrate := REAL_TO_UDINT((UINT_TO_REAL(GVL_ROB.in_CP1_set_flowrate*10))),
	n_CP1_Check_Flowrate := REAL_TO_UDINT((UINT_TO_REAL(GVL_ROB.in_CP1_set_check_Flowrate*10))),
	n_CP1_Flush_Flowrate := REAL_TO_UDINT((UINT_TO_REAL(GVL_ROB.in_CP1_set_flush_flowrate*10))),
	f_dosing_volume := UINT_TO_INT(GVL_ROB.in_CP1_set_dosing_volume),
	
	n_CP1_max_speed := GVL_RESD.n_Concrete_Pump_Max_Speed,
	n_CP1_target_speed := UINT_TO_INT(GVL_ROB.in_CP1_set_speed),

	// Admixture pump (High)
	b_AP1_Power_On := GVL_ROB.ib_AP1_power_on,
	b_AP1_Run := GVL_ROB.ib_AP1_set_run,
	b_AP1_Flush_On := GVL_ROB.ib_AP1_flush_on,
	b_AP1_Check_On := GVL_ROB.ib_AP1_check_on,
	
	n_AP1_Flowrate_mode := TRUE,
	n_AP1_Max_Flowrate := UINT_TO_INT(GVL_ROB.on_AP1_max_flowrate),
	n_AP1_Operate_Flowrate := REAL_TO_UDINT((UINT_TO_REAL(GVL_ROB.in_AP1_set_flowrate*10))),
	n_AP1_Check_Flowrate := REAL_TO_UDINT((UINT_TO_REAL(GVL_ROB.in_AP1_set_check_flowrate*10))),
	n_AP1_Flush_Flowrate := REAL_TO_UDINT((UINT_TO_REAL(GVL_ROB.in_AP1_set_flush_flowrate*10))),
	n_AP1_Dosing_factor := UINT_TO_INT(GVL_ROB.in_AP1_set_dosing_factor),
	
	// Admixture pump (High)
	b_SP1_Power_On := GVL_ROB.ib_SP1_power_on,
	b_SP1_Run := GVL_ROB.ib_SP1_set_run,
	b_SP1_Flush_On := GVL_ROB.ib_SP1_flush_on,
	b_SP1_Check_On := GVL_ROB.ib_SP1_set_check_on,
	
	n_SP1_Flowrate_mode := TRUE,
	n_SP1_Max_Flowrate := UINT_TO_INT(GVL_ROB.on_SP1_max_flowrate),
	n_SP1_Operate_Flowrate := REAL_TO_UDINT((UINT_TO_REAL(GVL_ROB.in_SP1_set_flowrate*10))),
	n_SP1_Check_Flowrate := REAL_TO_UDINT((UINT_TO_REAL(GVL_ROB.in_SP1_set_check_flowrate*10))),
	n_SP1_Flush_Flowrate := REAL_TO_UDINT((UINT_TO_REAL(GVL_ROB.in_SP1_flush_flowrate*10))),
	n_SP1_Dosing_factor := UINT_TO_INT(GVL_ROB.in_SP1_dosing_factor),
	);

//***********************************************************************************
// Inline Mixer
//***********************************************************************************
	//mixer 
Mixer1_2(
	Mixer1			:= GVL.Axis_Mixer1,
	Mixer2			:= GVL.Axis_Mixer2,
	f_Velocity		:= GVL.f_MI1_MaxSpeed,
	b_JogForward	:= FALSE,
	b_JogBackwards	:= fb_SetOutputDataToIO.b_MI1_set_run,
	b_Enable		:= fb_SetOutputDataToIO.b_Ml1_Enable AND GVL_IO.ib_CC1_Safety_Ready,
	b_Reset			:= GVL_ROB.ib_CC1_reset OR GVL_IO.ib_CC1_Button_Reset,
	f_Override		:= GVL.n_MI1_OverrideSpeed,
	);
	(*
	fb_MC_SetPosition(
	Axis			:= GVL.Axis_Mixer2,
	memory			:= 1,
	Feedback		:= 0);*)
pos:=GVL.Axis_Mixer2.NcToPlc.ModuloActPos;
GVL.b_MI1_ReadToDrive:=Mixer1_2.b_ReadyToDrive;
P_MI1_OnOff(b_set_run := fb_SetOutputDataToIO.b_MI1_set_run,);

//***********************************************************************************
// Concrete Pump
//***********************************************************************************

// concrete pump power control is from pump itself
P_CP1_Enable();
P_CP1_Check(b_set_run := fb_SetOutputDataToIO.b_CP1_Forward_On,
			b_check_mode_on := fb_SetOutputDataToIO.b_CP1_Check_On,
			t_check_duration := fb_setConfig._t_CP1_Check_Duration,
			);


//***********************************************************************************
// Acceleration Pump
//***********************************************************************************

// Acceleration Pump 1 check
P_AP1_Check(b_set_run := fb_SetOutputDataToIO.b_AP1_Run,
			b_check_mode_on := fb_SetOutputDataToIO.b_AP1_Check_On,
			t_check_duration := fb_setConfig._t_AP1_Check_Duration,
			);
// Check for Acceleration Pump 1 state
IF NOT fb_SetOutputDataToIO.b_AP1_Check_On THEN
//
// Acceleration Pump 1 On/Off
	P_AP1_OnOff(b_set_run := fb_SetOutputDataToIO.b_AP1_Run);
END_IF

//***********************************************************************************
// Superplasticizer Pump
//***********************************************************************************

// Superplasticizer Pump 1 Check (220916 WT
P_SP1_Check(b_set_run := fb_SetOutputDataToIO.b_SP1_Run,
			b_check_mode_on := fb_SetOutputDataToIO.b_SP1_Check_On,
			t_check_duration := fb_setConfig._t_SP1_Check_Duration,
			);
IF NOT fb_SetOutputDataToIO.b_SP1_Check_On THEN
	P_SP1_OnOff(b_set_run := fb_SetOutputDataToIO.b_SP1_Run);
END_IF

//***********************************************************************************
// Get out put data from PLC
//***********************************************************************************
fb_getOutputData(
	
	//CC1
	b_mode_manual := GVL_ROB.ob_mode_manual,
	b_mode_laptop := GVL_ROB.ob_mode_laptop, 	
	b_mode_robot := GVL_ROB.ob_mode_robot, 
	b_CC1_power_on := GVL_ROB.ob_CC1_power_on, 
	n_current_mode := GVL_ROB.on_current_mode,

	//MI1
	b_MI1_Is_Run := GVL_ROB.ob_MI1_is_run,
	b_MI1_is_ready := GVL_ROB.ob_MI1_is_ready,
	n_MI1_status_SpeedM1 := GVL_ROB.on_MI1_status_speed_motor_1,
	n_MI1_status_SpeedM2 := GVL_ROB.on_MI1_status_speed_motor_2,
	f_Status_Torque_Motor_1 := GVL_ROB.on_MI1_status_torque_motor_1,
	f_Status_Torque_Motor_2 := GVL_ROB.on_MI1_status_torque_motor_2,
	f_MI1_status_temperature_funnel_outlet := GVL_ROB.on_MI1_status_temperature_funnel_outlet,
	f_MI1_status_Pressure_funnel_inlet := GVL_ROB.on_MI1_status_pressure_funnel_inlet, 	
	f_MI1_status_temperature_motor_1  := GVL_ROB.on_MI1_status_temperature_motor_1, 			 
	f_MI1_status_temperature_motor_2  := GVL_ROB.on_MI1_status_temperature_motor_2,

	//CP1
	b_CP1_is_run := GVL_ROB.ob_CP1_is_run,
	b_CP1_is_ready := GVL_ROB.ob_CP1_is_ready,
	b_CP1_power_on := GVL_ROB.ob_CP1_power_on,
	b_CP1_safety_grid_on := GVL_ROB.ob_CP1_safety_grid_on,
	b_CP1_drive_error := GVL_ROB.ob_CP1_drive_error,
	
	f_CP1_status_temperature_concrete_fresh := GVL_ROB.on_CP1_status_temperature_concrete_fresh,
	f_CP1_status_temperature_Concrete_pump := GVL_ROB.on_CP1_status_temperature_concrete_pump,
	f_CP1_status_pressure_Concrete_pump := GVL_ROB.on_CP1_status_pressure_concrete_pump,
	
	//AP1
	b_AP1_is_run := GVL_ROB.ob_AP1_is_run,
	b_AP1_is_ready := GVL_ROB.ob_AP1_is_ready,
	b_AP1_no_error := GVL_ROB.ob_AP1_no_error,
	
	//SP1
	b_SP1_is_run := GVL_ROB.ob_SP1_is_run,
	b_SP1_is_ready := GVL_ROB.ob_SP1_is_ready,
	b_SP1_no_error := GVL_ROB.ob_SP1_no_error,
);
]]></ST>
    </Implementation>
    <LineIds Name="P_Robot_Operate">
      <LineId Id="117" Count="13" />
      <LineId Id="390" Count="0" />
      <LineId Id="132" Count="12" />
      <LineId Id="430" Count="0" />
      <LineId Id="432" Count="1" />
      <LineId Id="431" Count="0" />
      <LineId Id="149" Count="1" />
      <LineId Id="394" Count="0" />
      <LineId Id="152" Count="43" />
      <LineId Id="395" Count="0" />
      <LineId Id="196" Count="133" />
      <LineId Id="426" Count="1" />
      <LineId Id="425" Count="0" />
      <LineId Id="428" Count="0" />
      <LineId Id="330" Count="6" />
      <LineId Id="423" Count="0" />
      <LineId Id="337" Count="3" />
      <LineId Id="424" Count="0" />
      <LineId Id="341" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>