 < ?xml version = "1.0" encoding = "utf-8"? >
 < TcPlcObject Version = "1.1.0.1" ProductVersion = "3.1.4024.11" >
  < POU Name = "P_PNDataConvert" Id = "{a384d438-226e-494f-ae1a-229d16d11e5f}" SpecialFunc = "None" >
    < Declaration > < ![CDATA[PROGRAM P_PNDataConvert
VAR

	sizearr: UINT;

	arr_GISlot: ARRAY[32..255] OF BYTE;
	arr_GOSlot: ARRAY[32..255] OF BYTE;

	arr_CC1_DOSlot: ARRAY[0..7] OF BOOL;
	arr_CC1_DISlot: ARRAY[0..7] OF BOOL;

	arr_MI1_DOSlot: ARRAY [0..7] OF BOOL;
	arr_MI1_DISlot: ARRAY [0..7] OF BOOL;

	arr_CP1_DOSlot: ARRAY [0..7] OF BOOL;
	arr_CP1_DISlot: ARRAY [0..7] OF BOOL;

	arr_AP1_DOSlot: ARRAY [0..7] OF BOOL;
	arr_AP1_DISlot: ARRAY [0..7] OF BOOL;

	arr_SP1_DOSlot: ARRAY [0..7] OF BOOL;
	arr_SP1_DISlot: ARRAY [0..7] OF BOOL;

END_VAR
]] > < / Declaration >
    < IMPLEMENTATION >
      < ST > < ![CDATA[ // ***********************************************************************************
//
// Müller-steinag Gruppe, Kandergrien Einigen, CH-3646 Bern
// ETH Zurich, Building HIF E26, Laura-Hezner-Weg 7, CH-8093 Zürich
//
// ***********************************************************************************
//
// PROJECT: A061 Digital Casting System
// FUNCTION: Profinet Variable Convertor
// AUTHOR: Weiting Chen
// EMAIL: chenw@usi.ch
// Copyright: USI Mendrisio; ETH Zürich; Müller-steinag Gruppe (CH) 2024
//
// ***********************************************************************************

// output(o_) to robot digital input (DI); input(i_) from robot digital output(DO)

// Array of DO_From_ROB is 0 to 255 bits | 0 to 31 bytes
// Array of GO_From_ROB is 256 to 2047 bits | 32 to 255 bytes
// Array of DI_To_ROB is 0 to 255 bits | 0 to 31 bytes
// Array of GI_To_ROB is 256 to 2047 bits | 32 to 255 bytes

// Group input and output slots
	arr_GISlot := GVL_PN.GI_To_ROB;
	arr_GOSlot := GVL_PN.GO_From_ROB;

// Concrete Controller *****
	// Digital output from robot( mapping from 0 to 7 in robotstudio)
		arr_CC1_DOSlot := F_CONVERT_BYTE_TO_BIT(GVL_PN.DO_From_ROB[0]);
		GVL_ROB.ib_spare := arr_CC1_DOSlot[0]; // #0

	// Group output from Robot ( mapping from 32 to 46, 8*2Bytes in robotstudio)
		F_Convert_2Byte_to_Int(GVL_ROB.in_spare, arr_GOSlot[32], arr_GOSlot[33]); // #256 to 271

	// Digital input to robot (mapping from 0 to 7 in robotstudio)
		arr_CC1_DISlot := F_CONVERT_BYTE_TO_BIT(GVL_PN.DI_To_ROB[0]);
		arr_CC1_DISlot[0] := GVL_ROB.ob_mode_manual; // #0
		arr_CC1_DISlot[1] := GVL_ROB.ob_mode_laptop;
		arr_CC1_DISlot[2] := GVL_ROB.ob_mode_robot;
		arr_CC1_DISlot[3] := GVL_ROB.ob_CC1_power_on;
		arr_CC1_DISlot[3] := GVL_ROB.ob_CC1_power_on;

	// Group Input To Robot (32 to 46; 8*2Bytes)
		F_Convert_Int_to_2Byte(GVL_ROB.on_current_mode, arr_GISlot[32], arr_GISlot[33]); // #256 to 271


// Inline Mixer (MI1) *****
	// Digital output from robot ( mapping from 8 to 15 in robotstudio)
		arr_MI1_DOSlot := F_CONVERT_BYTE_TO_BIT(GVL_PN.DO_From_ROB[1]);
		GVL_ROB.ib_MI1_set_run := arr_MI1_DOSlot[0]; // [0 rpm to 120 rpm]
		GVL_ROB.ib_AP1_check_on := arr_MI1_DOSlot[1];
		GVL_ROB.ib_MI1_set_curved_speed_mode_on := arr_MI1_DOSlot[2];

	// Group output from Robot ( mapping from 47 to 61, 8*2Bytes in robotstudio)
		F_Convert_2Byte_to_Int(GVL_ROB.in_MI1_set_speed, arr_GOSlot[47], arr_GOSlot[48]);

	// Digital input to robot (mapping from 8 to 15 in robotstudio)
		arr_MI1_DISlot := F_CONVERT_BYTE_TO_BIT(GVL_PN.DI_To_ROB[1]);
		arr_MI1_DISlot[0] := GVL_ROB.ob_MI1_is_run;
		arr_MI1_DISlot[1] := GVL_ROB.ob_MI1_is_ready;

	// Group Input To Robot (mapping from 47 to 76, 16*2Bytes in robotstudio)
		F_Convert_Int_to_2Byte(GVL_ROB.on_MI1_status_speed_motor_1, arr_GISlot[47], arr_GISlot[48]);
		F_Convert_Int_to_2Byte(GVL_ROB.on_MI1_status_Speed_motor_2, arr_GISlot[49], arr_GISlot[50]);
		F_Convert_Int_to_2Byte(GVL_ROB.on_MI1_status_torque_motor_1, arr_GISlot[51], arr_GISlot[52]);
		F_Convert_Int_to_2Byte(GVL_ROB.on_MI1_status_torque_motor_2, arr_GISlot[53], arr_GISlot[54]);
		F_Convert_Int_to_2Byte(GVL_ROB.on_MI1_status_temperature_motor_1, arr_GISlot[55], arr_GISlot[56]);
		F_Convert_Int_to_2Byte(GVL_ROB.on_MI1_status_temperature_motor_2, arr_GISlot[57], arr_GISlot[58]);
		F_Convert_Int_to_2Byte(GVL_ROB.on_MI1_status_temperature_funnel_outlet, arr_GISlot[59], arr_GISlot[60]);
		F_Convert_Int_to_2Byte(GVL_ROB.on_MI1_status_Pressure_funnel_inlet, arr_GISlot[61], arr_GISlot[62]);


// Concrete pump (CP1) *****
	// Digital output from robot (mapping from 16 to 23 in robotstudio )
		arr_CP1_DOSlot := F_CONVERT_BYTE_TO_BIT(GVL_PN.DO_From_ROB[2]);
		GVL_ROB.ib_CP1_forward_on := arr_CP1_DOSlot[0]; // #16
		GVL_ROB.ib_CP1_backward_on := arr_CP1_DOSlot[1];		// 241219 Backward is not working from the conctroller
		GVL_ROB.ib_CP1_check_on := arr_CP1_DOSlot[2];
		GVL_ROB.ib_CP1_flush_on := arr_CP1_DOSlot[3];

	// Group output from Robot ( mapping from 62 to 76, 8*2Bytes in robotstudio)
		F_Convert_2Byte_to_Int(GVL_ROB.in_CP1_set_speed, arr_GOSlot[62], arr_GOSlot[63]); // 0 to 75 [rpm] #62
		F_Convert_2Byte_to_Int(GVL_ROB.in_CP1_set_flowrate, arr_GOSlot[64], arr_GOSlot[65]); // 0 to 16 [l/min]
		F_Convert_2Byte_to_Int(GVL_ROB.in_CP1_set_dosing_volume, arr_GOSlot[66], arr_GOSlot[67]); // calibration in 230926 WT 0.32
		F_Convert_2Byte_to_Int(GVL_ROB.in_CP1_set_check_Flowrate, arr_GOSlot[68], arr_GOSlot[69]);	// [l/min]
		F_Convert_2Byte_to_Int(GVL_ROB.in_CP1_concrete_density, arr_GOSlot[70], arr_GOSlot[71]); // [g/ml]
		F_Convert_2Byte_to_Int(GVL_ROB.in_CP1_concrete_mass, arr_GOSlot[72], arr_GOSlot[73]); // [g]
		F_Convert_2Byte_to_Int(GVL_ROB.in_CP1_set_flush_flowrate, arr_GOSlot[74], arr_GOSlot[75]); // [l/min]
		// F_Convert_2Byte_to_Int(GVL_ROB.t_CP1_set_check_duration, arr_GOSlot[76], arr_GOSlot[77]);	 check with 32 bit


	// Digital input to robot (mapping from 16 to 23 in robotstudio)
		arr_CP1_DISlot := F_CONVERT_BYTE_TO_BIT(GVL_PN.DI_To_ROB[2]);
		arr_CP1_DISlot[0] := GVL_ROB.ob_CP1_is_run; // #16
		arr_CP1_DISlot[1] := GVL_ROB.ob_CP1_is_ready;

	// Group Input To Robot (mapping from 77 to 91, 8*2Bytes in robotstudio)
		F_Convert_Int_to_2Byte(GVL_ROB.on_CP1_status_temperature_concrete_fresh, arr_GISlot[77], arr_GISlot[78]); // [°C]
		F_Convert_Int_to_2Byte(GVL_ROB.on_CP1_status_temperature_Concrete_pump, arr_GISlot[79], arr_GISlot[80]); // [°C]
		F_Convert_Int_to_2Byte(GVL_ROB.on_CP1_status_pressure_Concrete_pump, arr_GISlot[81], arr_GISlot[82]); // [ bar]




// Admixture pump, High dosage ViscoTech Pump *****
	// Digital output from robot (mapping from 24 to 31 in robotstudio )
		arr_AP1_DOSlot := F_CONVERT_BYTE_TO_BIT(GVL_PN.DO_From_ROB[3]);
		GVL_ROB.ib_AP1_set_run := arr_AP1_DOSlot[0]; // #24
		GVL_ROB.ib_AP1_check_on := arr_AP1_DOSlot[1];
		GVL_ROB.ib_AP1_flush_on := arr_AP1_DOSlot[2];

	// Group output from Robot ( mapping from 77 to 91, 8*2Bytes in robotstudio)
		F_Convert_2Byte_to_Int(GVL_ROB.in_AP1_set_flowrate, arr_GOSlot[77], arr_GOSlot[78]); // **** [ml/min] #77
		F_Convert_2Byte_to_Int(GVL_ROB.in_AP1_set_dosing_factor, arr_GOSlot[79], arr_GOSlot[80]);
		F_Convert_2Byte_to_Int(GVL_ROB.in_AP1_set_check_flowrate, arr_GOSlot[81], arr_GOSlot[82]);
		F_Convert_2Byte_to_Int(GVL_ROB.in_AP1_material_density, arr_GOSlot[83], arr_GOSlot[84]);
		F_Convert_2Byte_to_Int(GVL_ROB.in_AP1_material_mass, arr_GOSlot[85], arr_GOSlot[86]);

		F_Convert_2Byte_to_Int(GVL_ROB.in_AP1_set_dosing_factor, arr_GOSlot[79], arr_GOSlot[80]);
		F_Convert_2Byte_to_Int(GVL_ROB.in_AP1_flush_flowrate, arr_GOSlot[81], arr_GOSlot[82]);
		// F_Convert_2Byte_to_Int(GVL_ROB.t_AP1_set_check_duration, arr_GOSlot[83], arr_GOSlot[84]); check with 32 bit

	// Digital input to robot (mapping from 24 to 31 in robotstudio)
		arr_AP1_DISlot := F_CONVERT_BYTE_TO_BIT(GVL_PN.DI_To_ROB[3]);	// #24
		arr_AP1_DISlot[0] := GVL_ROB.ob_AP1_is_run;

	// Group Input To Robot (mapping from 92 to 106, 8*2Bytes in robotstudio)
		F_Convert_2Byte_to_Int(GVL_ROB.on_AP1_max_flowrate, arr_GOSlot[92], arr_GOSlot[93]); // [l/min]



// Admixture pump, Low dosage ViscoTech Pump *****
	// Digital output from robot (mapping from 32 to 39 in robotstudio )
		arr_SP1_DOSlot := F_CONVERT_BYTE_TO_BIT(GVL_PN.DO_From_ROB[4]);
		GVL_ROB.ib_SP1_set_run := arr_SP1_DOSlot[0]; // #32
		GVL_ROB.ib_SP1_set_check_on := arr_SP1_DOSlot[1];
		GVL_ROB.ib_SP1_flush_on := arr_SP1_DOSlot[2];

	// Group output from Robot ( mapping from 92 to 106, 8*2Bytes in robotstudio)
		F_Convert_2Byte_to_Int(GVL_ROB.in_SP1_set_flowrate, arr_GOSlot[92], arr_GOSlot[93]); // **** [ml/min] #92
		F_Convert_2Byte_to_Int(GVL_ROB.in_SP1_dosing_factor, arr_GOSlot[93], arr_GOSlot[94]);
		F_Convert_2Byte_to_Int(GVL_ROB.in_SP1_set_check_flowrate, arr_GOSlot[95], arr_GOSlot[96]);
		F_Convert_2Byte_to_Int(GVL_ROB.in_SP1_material_density, arr_GOSlot[97], arr_GOSlot[98]);
		F_Convert_2Byte_to_Int(GVL_ROB.in_SP1_material_mass, arr_GOSlot[99], arr_GOSlot[100]);
		F_Convert_2Byte_to_Int(GVL_ROB.in_SP1_flush_flowrate, arr_GOSlot[101], arr_GOSlot[102]);
		// F_Convert_2Byte_to_Int(GVL_ROB.t_SP1_Check_Duration, arr_GOSlot[103], arr_GOSlot[104]); // Check with 32 bit

	// Digital input to robot (mapping from 32 to 39 in robotstudio)
		arr_SP1_DISlot := F_CONVERT_BYTE_TO_BIT(GVL_PN.DI_To_ROB[4]);
		GVL_ROB.ob_SP1_is_run := arr_SP1_DISlot[0]; // #32

	// Group Input To Robot (mapping from 106 to 120, 8*2Bytes in robotstudio)
		F_Convert_2Byte_to_Int(GVL_ROB.on_SP1_max_flowrate, arr_GOSlot[106], arr_GOSlot[107]); // [l/min]



// Spare Component *****
	// Digital output from robot (mapping from 40 to .. in robotstudio )
		// Template
		// arr_SP1_DOSlot := F_Convert_Byte_to_Bit(GVL_PN.DO_From_ROB[4]);
		// GVL_ROB.ib_SP1_set_run := arr_SP1_DOSlot[0];

	// Group output from Robot ( mapping from 107 to .., 8*2Bytes in robotstudio)
		// F_Convert_2Byte_to_Int(GVL_ROB.in_SP1_set_flowrate, arr_GOSlot[92], arr_GOSlot[93]);
	// Digital input to robot (mapping from 40 to .. in robotstudio)
		// Template
		// arr_SP1_DISlot := F_Convert_Byte_to_Bit(GVL_PN.DI_To_ROB[4]);
		// GVL_ROB.ob_SP1_is_run:= arr_SP1_DISlot[0]; // #32

	// Group Input To Robot (mapping from 121 to .., 8*2Bytes in robotstudio)
		// F_Convert_2Byte_to_Int(GVL_ROB.on_SP1_max_flowrate, arr_GOSlot[106], arr_GOSlot[107]);
]] > < / ST >
    < / IMPLEMENTATION >
    < LineIds Name = "P_PNDataConvert" >
      < LineId Id = "28" Count = "170" / >
      < LineId Id = "5" Count = "0" / >
    < / LineIds >
  < / POU >
 < / TcPlcObject >
